p {
  font-size: 12px;
  color: gray;
}

.wrap {
  display: flex;
  width: 500px;
  background-color: orange;
}
.wrap > div {
  color: white;
  // flex: 1 1 150px;
  // flexはショートハンド

  // flex-grow: 親要素のflexコンテナの余っているスペース
  // 子要素のflexアイテムに分配して、flexアイテムを伸ばす。

  // 縮んでいて余っている余白をアイテムの数分、分けて整数の割合で振り分ける。

  // flex-shrink: 親要素のflexからはみ出た分を元に、子要素のflexアイテムを縮めるプロパティ
  // flex-growとは全く逆の性質。
  // 使用する場合は、flex-shrink:0 を明示的に定義する。

  // flex-basis: widthとheightと同じ役割を果たす。
  // 親コンテンツに対するパーセントを設定できる
  // 基本幅の設定ができる

  margin: 5px;

  // 参考
  // https://fuuno.net/web02/flex/flex.html
  // https://miyattiblog.com/explanation-of-flex-property/
}

.wrap > .one {
  flex-grow: 1;
  flex-shrink: 2; // はみ出た100%の2比率分を縮める
  flex-basis: 150px;
  background-color: red;
  width: 10px; // flex-basisはwidthを優先される。
}

.wrap > .two {
  flex-grow: 1;
  flex-shrink: 3; // はみ出た100%の3比率分を縮める
  flex-basis: 150px;
  background-color: purple;
  width: 30px;
}

.wrapper {
  margin-top: 20px;
  width: 500px;
  display: flex;
  flex-wrap: wrap;
  background-color: purple;
}
.wrapper > div {
  // flex: 1 1 200px; // flex-basisが優勢
  flex-basis: 200px;
  flex-grow: 1; //伸縮できる様にする。 余ったものを列の数分に振り分ける。
  background-color: bisque;
}

.grid-wrapper {
  width: 500px;
  // 列と行、両方を整列させることができるのがGrid
  display: grid;
  grid-template-columns: repeat(4, 1fr);
}

.grid-wrapper > div {
  background-color: skyblue;
}

// 結論
// 行、列のどちらかのみを制御したい場合 FlexBox
// 行と列どちらも制御したい場合、Grid

.container {
  margin-top: 20px;
  width: 700px;
  display: grid;
  // 【トラック】 グリッドの行および列のこと
  // 隣接する2本のラインの間を表している。
  // 以下でトラックの高さと幅を取る
  grid-template-rows: 100px 50px; // 行
  grid-template-columns: 150px 200px 1fr; // 列 1frは残り
}

// アイテムの配置を指定する

// ＜方法A＞
// アイテムが占める行・列のラインの番号をスラッシュ区切りで指定する
// 番号は１から始まる
// ラインの番号で指定する
.container > .itemA {
  grid-row: 1 / 3;
  grid-column: 1 / 2;
  background-color: rgb(255, 166, 166);
}

.container > .itemB {
  grid-row: 1 / 2;
  grid-column: 2 / 3;
  background-color: rgb(173, 255, 166);
}

.container > .itemC {
  grid-row: 2 / 3; // 3番のラインから2番のラインまでを引く
  grid-column: 2 / 3;
  background-color: rgb(166, 194, 255);
}

.container > .itemD {
  grid-row: 1 / 3;
  grid-column: 3 / 4;
  background-color: rgb(255, 166, 225);
}

// ＜方法B＞
// エリアに名前を付けて指定する
